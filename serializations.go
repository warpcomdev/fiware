package fiware

// Autogenerated file - DO NOT EDIT

func (x Vertical) Serialize(s Serializer) {
	s.KeyString("name", x.Name)
	s.KeyString("subservice", x.Subservice)
	if len(x.EntityTypes) > 0 {
		s.BeginList("entityTypes")
		for _, y := range x.EntityTypes {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
	if len(x.Entities) > 0 {
		s.BeginList("entities")
		for _, y := range x.Entities {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
	if len(x.ServiceMappings) > 0 {
		s.BeginList("serviceMappings")
		for _, y := range x.ServiceMappings {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
	if len(x.Suscriptions) > 0 {
		s.BeginList("suscriptions")
		for _, y := range x.Suscriptions {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
	if len(x.Tables) > 0 {
		s.BeginList("tables")
		for _, y := range x.Tables {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
	if len(x.Services) > 0 {
		s.BeginList("services")
		for _, y := range x.Services {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
	if len(x.Devices) > 0 {
		s.BeginList("devices")
		for _, y := range x.Devices {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
	if len(x.Rules) > 0 {
		s.BeginList("rules")
		for _, y := range x.Rules {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
}

func (x Rule) Serialize(s Serializer) {
	s.KeyString("name", x.Name)
	if x.Description != "" {
		s.KeyString("description", x.Description)
	}
	if x.Misc != "" {
		s.KeyString("misc", x.Misc)
	}
	if x.Text != "" {
		s.KeyString("text", x.Text)
	}
	if x.VR != "" {
		s.KeyString("VR", x.VR)
	}
	if len(x.Action) > 0 {
		s.KeyRaw("action", x.Action, false)
	}
	if len(x.NoSignal) > 0 {
		s.KeyRaw("nosignal", x.NoSignal, false)
	}
	x.RuleStatus.Serialize(s)
}

func (x RuleStatus) Serialize(s Serializer) {
	if x.Subservice != "" {
		s.KeyString("subservice", x.Subservice)
	}
	if x.Service != "" {
		s.KeyString("service", x.Service)
	}
	if x.ID != "" {
		s.KeyString("_id", x.ID)
	}
}

func (x EntityType) Serialize(s Serializer) {
	s.KeyString("entityID", x.ID)
	s.KeyString("entityType", x.Type)
	s.BeginList("attrs")
	for _, y := range x.Attrs {
		s.BeginBlock("")
		s.Serialize(y)
		s.EndBlock()
	}
	s.EndList()
}

func (x Attribute) Serialize(s Serializer) {
	s.KeyString("name", x.Name)
	s.KeyString("type", x.Type)
	if len(x.Value) > 0 {
		s.KeyRaw("value", x.Value, true)
	}
	if len(x.Metadatas) > 0 {
		s.KeyRaw("metadatas", x.Metadatas, true)
	}
}

func (x Entity) Serialize(s Serializer) {
	s.KeyString("entityID", x.ID)
	s.KeyString("entityType", x.Type)
	s.BeginBlock("attrs")
	for k, v := range x.Attrs {
		s.KeyRaw(k, v, true)
	}
	s.EndBlock()
	if len(x.MetaDatas) > 0 {
		s.BeginBlock("metadatas")
		for k, v := range x.MetaDatas {
			s.KeyRaw(k, v, true)
		}
		s.EndBlock()
	}
}

func (x ServiceMapping) Serialize(s Serializer) {
	if x.OriginalService != "" {
		s.KeyString("originalService", x.OriginalService)
	}
	if x.NewService != "" {
		s.KeyString("newService", x.NewService)
	}
	s.BeginList("servicePathMappings")
	for _, y := range x.ServicePathMappings {
		s.BeginBlock("")
		s.Serialize(y)
		s.EndBlock()
	}
	s.EndList()
}

func (x ServicePathMapping) Serialize(s Serializer) {
	if x.OriginalServicePath != "" {
		s.KeyString("originalServicePath", x.OriginalServicePath)
	}
	if x.NewServicePath != "" {
		s.KeyString("newServicePath", x.NewServicePath)
	}
	s.BeginList("entityMappings")
	for _, y := range x.EntityMappings {
		s.BeginBlock("")
		s.Serialize(y)
		s.EndBlock()
	}
	s.EndList()
}

func (x EntityMapping) Serialize(s Serializer) {
	if x.OriginalEntityId != "" {
		s.KeyString("originalEntityId", x.OriginalEntityId)
	}
	if x.NewEntityId != "" {
		s.KeyString("newEntityId", x.NewEntityId)
	}
	if x.OriginalEntityType != "" {
		s.KeyString("originalEntityType", x.OriginalEntityType)
	}
	if x.NewEntityType != "" {
		s.KeyString("newEntityType", x.NewEntityType)
	}
	s.BeginList("attributeMappings")
	for _, y := range x.AttributeMappings {
		s.BeginBlock("")
		s.Serialize(y)
		s.EndBlock()
	}
	s.EndList()
}

func (x AttributeMapping) Serialize(s Serializer) {
	if x.OriginalAttributeName != "" {
		s.KeyString("originalAttributeName", x.OriginalAttributeName)
	}
	if x.OriginalAttributeType != "" {
		s.KeyString("originalAttributeType", x.OriginalAttributeType)
	}
	if x.NewAttributeName != "" {
		s.KeyString("newAttributeName", x.NewAttributeName)
	}
	if x.NewAttributeType != "" {
		s.KeyString("newAttributeType", x.NewAttributeType)
	}
}

func (x Suscription) Serialize(s Serializer) {
	s.KeyString("description", x.Description)
	if x.Status != "" {
		s.KeyString("status", x.Status)
	}
	s.BeginBlock("notification")
	x.Notification.Serialize(s)
	s.EndBlock()
	s.BeginBlock("subject")
	x.Subject.Serialize(s)
	s.EndBlock()
	x.SuscriptionStatus.Serialize(s)
}

func (x Notification) Serialize(s Serializer) {
	if len(x.Attrs) > 0 {
		s.BeginList("attrs")
		for _, y := range x.Attrs {
			s.String(y)
		}
		s.EndList()
	}
	s.KeyString("attrsFormat", x.AttrsFormat)
	if !x.HTTP.IsEmpty() {
		s.BeginBlock("http")
		x.HTTP.Serialize(s)
		s.EndBlock()
	}
	if !x.HTTPCustom.IsEmpty() {
		s.BeginBlock("httpCustom")
		x.HTTPCustom.Serialize(s)
		s.EndBlock()
	}
	if x.OnlyChangedAttrs {
		s.KeyBool("onlyChangedAttrs", x.OnlyChangedAttrs)
	}
	x.NotificationStatus.Serialize(s)
}

func (x NotificationStatus) Serialize(s Serializer) {
	if x.LastFailure != "" {
		s.KeyString("lastFailure", x.LastFailure)
	}
	if x.LastFailureReason != "" {
		s.KeyString("lastFailureReason", x.LastFailureReason)
	}
	if x.LastNotification != "" {
		s.KeyString("lastNotification", x.LastNotification)
	}
	if x.LastSuccess != "" {
		s.KeyString("lastSuccess", x.LastSuccess)
	}
	if x.LastSuccessCode != 0 {
		s.KeyInt("lastSuccessCode", x.LastSuccessCode)
	}
	if x.FailsCounter != 0 {
		s.KeyInt("failsCounter", x.FailsCounter)
	}
	if x.TimesSent != 0 {
		s.KeyInt("timesSent", x.TimesSent)
	}
}

func (x NotificationHTTP) Serialize(s Serializer) {
	s.KeyString("url", x.URL)
}

func (x NotificationCustom) Serialize(s Serializer) {
	s.KeyString("url", x.URL)
	if len(x.Headers) > 0 {
		s.BeginBlock("headers")
		for k, v := range x.Headers {
			s.KeyString(k, v)
		}
		s.EndBlock()
	}
}

func (x Subject) Serialize(s Serializer) {
	s.BeginBlock("condition")
	x.Condition.Serialize(s)
	s.EndBlock()
	s.BeginList("entities")
	for _, y := range x.Entities {
		s.BeginBlock("")
		s.Serialize(y)
		s.EndBlock()
	}
	s.EndList()
}

func (x SubjectCondition) Serialize(s Serializer) {
	if len(x.Attrs) > 0 {
		s.BeginList("attrs")
		for _, y := range x.Attrs {
			s.String(y)
		}
		s.EndList()
	}
	if !x.Expression.IsEmpty() {
		s.BeginBlock("expression")
		x.Expression.Serialize(s)
		s.EndBlock()
	}
}

func (x SubjectExpression) Serialize(s Serializer) {
	if x.Q != "" {
		s.KeyString("q", x.Q)
	}
}

func (x SubjectEntity) Serialize(s Serializer) {
	if x.IdPattern != "" {
		s.KeyString("idPattern", x.IdPattern)
	}
	s.KeyString("type", x.Type)
}

func (x SuscriptionStatus) Serialize(s Serializer) {
	if x.ID != "" {
		s.KeyString("id", x.ID)
	}
}

func (x Table) Serialize(s Serializer) {
	s.KeyString("name", x.Name)
	s.BeginList("columns")
	for _, y := range x.Columns {
		s.BeginBlock("")
		s.Serialize(y)
		s.EndBlock()
	}
	s.EndList()
	s.BeginList("primaryKey")
	for _, y := range x.PrimaryKey {
		s.String(y)
	}
	s.EndList()
	s.BeginList("indexes")
	for _, y := range x.Indexes {
		s.BeginBlock("")
		s.Serialize(y)
		s.EndBlock()
	}
	s.EndList()
	s.KeyBool("lastdata", x.LastData)
}

func (x TableColumn) Serialize(s Serializer) {
	s.KeyString("name", x.Name)
	s.KeyString("type", x.Type)
	if x.NotNull {
		s.KeyBool("notNull", x.NotNull)
	}
	if x.Default != "" {
		s.KeyString("default", x.Default)
	}
}

func (x TableIndex) Serialize(s Serializer) {
	s.KeyString("name", x.Name)
	s.BeginList("columns")
	for _, y := range x.Columns {
		s.String(y)
	}
	s.EndList()
	if x.Geometry {
		s.KeyBool("geometry", x.Geometry)
	}
}

func (x Service) Serialize(s Serializer) {
	s.KeyString("resource", x.Resource)
	s.KeyString("apikey", x.APIKey)
	s.KeyString("entity_type", x.EntityType)
	if x.Description != "" {
		s.KeyString("description", x.Description)
	}
	s.KeyString("protocol", x.Protocol)
	if x.Transport != "" {
		s.KeyString("transport", x.Transport)
	}
	if x.Timestamp {
		s.KeyBool("timestamp", x.Timestamp)
	}
	if x.ExplicitAttrs {
		s.KeyBool("explicitAttrs", x.ExplicitAttrs)
	}
	if len(x.InternalAttributes) > 0 {
		s.BeginList("internal_attributes")
		for _, y := range x.InternalAttributes {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
	s.BeginList("attributes")
	for _, y := range x.Attributes {
		s.BeginBlock("")
		s.Serialize(y)
		s.EndBlock()
	}
	s.EndList()
	if len(x.Lazy) > 0 {
		s.BeginList("lazy")
		for _, y := range x.Lazy {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
	if len(x.StaticAttributes) > 0 {
		s.BeginList("static_attributes")
		for _, y := range x.StaticAttributes {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
	if len(x.Commands) > 0 {
		s.BeginList("commands")
		for _, y := range x.Commands {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
	if x.ExpressionLanguage != "" {
		s.KeyString("expressionLanguage", x.ExpressionLanguage)
	}
	x.GroupStatus.Serialize(s)
}

func (x GroupStatus) Serialize(s Serializer) {
	if x.ID != "" {
		s.KeyString("_id", x.ID)
	}
	if x.V != 0 {
		s.KeyInt("__v", x.V)
	}
	if x.IOTAgent != "" {
		s.KeyString("iotagent", x.IOTAgent)
	}
	if x.ServicePath != "" {
		s.KeyString("service_path", x.ServicePath)
	}
	if x.Service != "" {
		s.KeyString("service", x.Service)
	}
	if x.CBHost != "" {
		s.KeyString("cbHost", x.CBHost)
	}
}

func (x DeviceAttribute) Serialize(s Serializer) {
	s.KeyString("object_id", x.ObjectId)
	s.KeyString("name", x.Name)
	if x.Type != "" {
		s.KeyString("type", x.Type)
	}
	if x.Expression != "" {
		s.KeyString("expression", x.Expression)
	}
	if x.EntityName != "" {
		s.KeyString("entity_name", x.EntityName)
	}
	s.KeyString("entity_type", x.EntityType)
}

func (x DeviceCommand) Serialize(s Serializer) {
	if x.ObjectId != "" {
		s.KeyString("object_id", x.ObjectId)
	}
	if x.Name != "" {
		s.KeyString("name", x.Name)
	}
	if x.Type != "" {
		s.KeyString("type", x.Type)
	}
}

func (x Device) Serialize(s Serializer) {
	s.KeyString("device_id", x.DeviceId)
	if x.APIKey != "" {
		s.KeyString("apikey", x.APIKey)
	}
	if x.EntityName != "" {
		s.KeyString("entity_name", x.EntityName)
	}
	s.KeyString("entity_type", x.EntityType)
	if x.Polling {
		s.KeyBool("polling", x.Polling)
	}
	s.KeyString("transport", x.Transport)
	if x.Timestamp {
		s.KeyBool("timestamp", x.Timestamp)
	}
	if x.Endpoint != "" {
		s.KeyString("endpoint", x.Endpoint)
	}
	if len(x.Attributes) > 0 {
		s.BeginList("attributes")
		for _, y := range x.Attributes {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
	if len(x.Lazy) > 0 {
		s.BeginList("lazy")
		for _, y := range x.Lazy {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
	if len(x.Commands) > 0 {
		s.BeginList("commands")
		for _, y := range x.Commands {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
	if len(x.StaticAttributes) > 0 {
		s.BeginList("static_attributes")
		for _, y := range x.StaticAttributes {
			s.BeginBlock("")
			s.Serialize(y)
			s.EndBlock()
		}
		s.EndList()
	}
	s.KeyString("protocol", x.Protocol)
	if x.ExpressionLanguage != "" {
		s.KeyString("expressionLanguage", x.ExpressionLanguage)
	}
	if x.ExplicitAttrs {
		s.KeyBool("explicitAttrs", x.ExplicitAttrs)
	}
	x.DeviceStatus.Serialize(s)
}

func (x DeviceStatus) Serialize(s Serializer) {
	if x.Service != "" {
		s.KeyString("service", x.Service)
	}
	if x.ServicePath != "" {
		s.KeyString("service_path", x.ServicePath)
	}
}
