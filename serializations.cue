// Autogenerated file - DO NOT EDIT

name?:       string
subservice?: string
entityTypes?: [...#EntityType]
entities?: [...#Entity]
environment?: #Environment
deployment?:  #DeploymentManifest
panels?:      #PanelManifest
subscriptions?: [string]: #Subscription
rules?: [string]:         #Rule
verticals?: [string]:     #Vertical
services?: [...#Service]
devices?: [...#Device]
registrations?: [...#Registration]
sql?:  #Json
cdas?: #Json
etls?: #Json
serviceMappings?: [...#ServiceMapping]
projects?: [...#Project]
domains?: [...#Domain]
urboPanels?: [string]: #UrboPanel
tables?: [...#Table]
views?: [...#View]
users?: [...#User]
groups?: [...#Group]
roles?: [...#Role]
assignments?: [...#RoleAssignment]

#EntityType: {
	entityID?:  string
	entityType: string
	attrs: [...#Attribute]
}

#Attribute: {
	name: string
	type: string
	description?: [...string]
	value?:        #Json
	metadatas?:    #Json
	singletonKey?: bool
	simulated?:    bool
	longterm?:     string
	longtermOptions?: [...string]
}

#Entity: {
	entityID:   string
	entityType: string
	attrs: [string]:      #Json
	metadatas?: [string]: #Json
}

#Environment: {
	notificationEndpoints: [string]: string
}

#DeploymentManifest: {
	sources?: [string]: #ManifestSource
}

#ManifestSource: {
	path?: string
	files?: [...string]
}

#PanelManifest: {
	sources?: [string]: #ManifestSource
}

#Subscription: {
	description:    string
	status?:        string
	expires?:       string
	notification:   #Notification
	subject:        #Subject
	id?:            string @anonymous(SubscriptionStatus)
	documentation?: string @anonymous(SubscriptionStatus)
}

#Notification: {
	attrs?: [...string]
	exceptAttrs?: [...string]
	attrsFormat?:       string
	http?:              #NotificationHTTP
	httpCustom?:        #NotificationCustom
	mqtt?:              #NotificationMQTT
	mqttCustom?:        #NotificationMQTTCustom
	onlyChangedAttrs?:  bool
	covered?:           bool
	lastFailure?:       string @anonymous(NotificationStatus)
	lastFailureReason?: string @anonymous(NotificationStatus)
	lastNotification?:  string @anonymous(NotificationStatus)
	lastSuccess?:       string @anonymous(NotificationStatus)
	lastSuccessCode?:   int    @anonymous(NotificationStatus)
	failsCounter?:      int    @anonymous(NotificationStatus)
	timesSent?:         int    @anonymous(NotificationStatus)
}

#NotificationHTTP: {
	url:      string
	timeout?: int
}

#NotificationCustom: {
	url:      string
	timeout?: int
	headers?: [string]: string
	qs?: [string]:      string
	method?:  string
	payload?: #Json
	json?:    #Json
	ngsi?:    #Json
}

#NotificationMQTT: {
	url:     string
	topic:   string
	qos?:    string
	user?:   string
	passwd?: string
}

#NotificationMQTTCustom: {
	url:      string
	topic:    string
	qos?:     int
	user?:    string
	passwd?:  string
	payload?: #Json
	json?:    #Json
	ngsi?:    #Json
}

#Subject: {
	condition: #SubjectCondition
	entities: [...#SubjectEntity]
}

#SubjectCondition: {
	attrs: [...string]
	expression?: #SubjectExpression
	alterationTypes?: [...string]
	notifyOnMetadataChange?: bool
}

#SubjectExpression: {
	q?: string
}

#SubjectEntity: {
	id?:        string
	idPattern?: string
	type:       string
}

#Rule: {
	name:         string
	description?: string
	misc?:        string
	text?:        string
	VR?:          string
	action?:      #Json
	nosignal?:    #Json
	subservice?:  string @anonymous(RuleStatus)
	service?:     string @anonymous(RuleStatus)
	_id?:         string @anonymous(RuleStatus)
}

#Vertical: {
	panels?: [...string]
	shadowPanels?: [...string]
	slug:  string
	name:  string
	icon?: string
	i18n?: #Json
	panelsObjects?: [...#UrboPanel] @anonymous(UrboVerticalStatus)
	shadowPanelsObjects?: [...#UrboPanel] @anonymous(UrboVerticalStatus)

	#UrboPanel: {
		name:           string
		description?:   string
		slug:           string
		lowercaseSlug?: string
		widgetCount?:   int
		isShadow?:      bool
		section?:       string
	}
}

#Service: {
	resource:       string
	apikey:         string
	token?:         string
	entity_type:    string
	description?:   string
	protocol:       string
	transport?:     string
	timestamp?:     bool
	explicitAttrs?: #Json
	internal_attributes?: [...#DeviceAttribute]
	attributes: [...#DeviceAttribute]
	lazy?: [...#DeviceAttribute]
	static_attributes?: [...#DeviceAttribute]
	commands?: [...#DeviceCommand]
	expressionLanguage?: string
	entityNameExp?:      string
	PayloadType?:        string
	autoprovision?:      bool
	_id?:                string @anonymous(ServiceStatus)
	iotagent?:           string @anonymous(ServiceStatus)
	service_path?:       string @anonymous(ServiceStatus)
	service?:            string @anonymous(ServiceStatus)
	cbHost?:             string @anonymous(ServiceStatus)
}

#DeviceAttribute: {
	object_id:    string
	name:         string
	type?:        string
	value?:       #Json
	expression?:  string
	skipValue?:   bool
	entity_name?: string
	entity_type?: string
}

#DeviceCommand: {
	object_id?: string
	name?:      string
	type?:      string
	value?:     string
	mqtt?:      #Json
}

#Device: {
	device_id:    string
	apikey?:      string
	entity_name?: string
	entity_type:  string
	polling?:     bool
	transport:    string
	timestamp?:   bool
	endpoint?:    string
	attributes?: [...#DeviceAttribute]
	lazy?: [...#DeviceAttribute]
	commands?: [...#DeviceCommand]
	static_attributes?: [...#DeviceAttribute]
	protocol:            string
	expressionLanguage?: string
	explicitAttrs?:      #Json
	service?:            string @anonymous(DeviceStatus)
	service_path?:       string @anonymous(DeviceStatus)
}

#Registration: {
	id:            string
	description?:  string
	dataProvided?: #Json
	provider?:     #Json
	status:        string @anonymous(RegistrationStatus)
}

#ServiceMapping: {
	originalService?: string
	newService?:      string
	servicePathMappings: [...#ServicePathMapping]
}

#ServicePathMapping: {
	originalServicePath?: string
	newServicePath?:      string
	entityMappings: [...#EntityMapping]
}

#EntityMapping: {
	originalEntityId?:   string
	newEntityId?:        string
	originalEntityType?: string
	newEntityType?:      string
	attributeMappings: [...#AttributeMapping]
}

#AttributeMapping: {
	originalAttributeName?: string
	originalAttributeType?: string
	newAttributeName?:      string
	newAttributeType?:      string
}

#Project: {
	is_domain:    bool
	description?: string
	tags?:        #Json
	enabled:      bool
	name:         string
	parent_id?:   string
	domain_id?:   string
	links?:       #Json  @anonymous(ProjectStatus)
	id:           string @anonymous(ProjectStatus)
	parent:       string @anonymous(ProjectStatus)
	domain:       string @anonymous(ProjectStatus)
}

#Domain: {
	description?: string
	enabled:      bool
	name:         string
	links?:       #Json  @anonymous(DomainStatus)
	id:           string @anonymous(DomainStatus)
}

#Table: {
	name: string
	columns: [...#TableColumn]
	primaryKey: [...string]
	indexes: [...#TableIndex]
	lastdata: bool
	singleton?: [...string]
}

#TableColumn: {
	name:     string
	type:     string
	notNull?: bool
	default?: string
}

#TableIndex: {
	name: string
	columns: [...string]
	geometry?: bool
}

#View: {
	materialized?: bool
	name:          string
	from:          string
	group: [...string]
	columns: [...#ViewColumn]
}

#ViewColumn: {
	name:       string
	expression: string
}

#User: {
	name:         string
	description?: string
	enabled:      bool
	email?:       string
	options?: [string]: #Json
	domain_id:            string
	links?:               #Json  @anonymous(UserStatus)
	id?:                  string @anonymous(UserStatus)
	domain?:              string @anonymous(UserStatus)
	password_expires_at?: #Json  @anonymous(UserStatus)
}

#Group: {
	name:         string
	description?: string
	domain_id:    string
	users?: [...string]
	links?: #Json  @anonymous(GroupStatus)
	id:     string @anonymous(GroupStatus)
	domain: string @anonymous(GroupStatus)
	userNames?: [...string] @anonymous(GroupStatus)
}

#Role: {
	description?: string
	name:         string
	domain_id:    string
	links?:       #Json  @anonymous(RoleStatus)
	id:           string @anonymous(RoleStatus)
	domain:       string @anonymous(RoleStatus)
}

#RoleAssignment: {
	scope?:      #Json
	role?:       #AssignmentID
	user?:       #AssignmentID
	group?:      #AssignmentID
	links?:      #Json  @anonymous(RoleAssignmentStatus)
	inherited:   string @anonymous(RoleAssignmentStatus)
	project?:    string @anonymous(RoleAssignmentStatus)
	domain?:     string @anonymous(RoleAssignmentStatus)
	scope_name?: string @anonymous(RoleAssignmentStatus)
}

#AssignmentID: {
	id?:      string
	name?:    string
	domain?:  #Json
	project?: #Json
}

#Json: _ // cuaquier cosa...
